;Команда mov и методы адрессации

.model small
.stack 100h
.data

    ;пример записи в память байтовых значений
    mark1 db 0;                 адрес - ds:0000h, значение - 0, десятичная запись
    mark2 db '0';               адрес - ds:0001h, значение - 30, запись ASCII-кодом
    mark3 db 10;                адрес - ds:0002h, значение - 10, еще одна десятичная запись
    mark4 db 0Ah;               адрес - ds:0003h, значение - 10, шестнадцатиричная запись
    mark5 db 10h;               адрес - ds:0004h, значение - 16, еще одна шестнадцатиричная запись
    mark6 db 12o;               адрес - ds:0005h, значение - 10, восьмиричная запись
    mark7 db 110b;              адрес - ds:0006h, значение - 10, двоичная запись

    ;удивительные свойства дополнительного кода или почему не надо было забивать на АИЛОВТ
    mark8 db 255;               адрес - ds:0007h, значение - 255(максимальное)
    mark9 db -1;                адрес - ds:0008h, значение - 255(при интерпритации как беззнакового)

    ;значения размерностью больше чем 1 байт и их максимальные значения
    mark10 dw 65535;            адрес - ds:0009h
    mark11 dd 4294967295;       адрес - ds:000Bh
    mark12 db 255;              адрес - ds:000Fh

    ;запись нескольких значений через одну метку
    mark13 db 0, 01b, 2o, 3h;   адрес - ds:0010h
    mark14 dw '0', '1';         адрес - ds:0014h
    mark15 dd 0, -1;            адрес - ds:0018h
    mark16 db "0123";           адрес - ds:0020h
    mark17 db 1, 2;             адрес - ds:0024h

    ;использование директивы dup
    mark18 db 4 dup(0);         адрес - ds:0026h;
    mark19 dw 2 dup(10h);       адрес - ds 002Ah;
    mark20 dd 1 dup('0');       адрес - ds:002Eh;

    ;случайное значение
    mark21 db ?;                 адрес - ds:0032h;
    
    supermark db 1, '0', 02h, ?, 12o, 110b, 4 dup(?);


.code

    start:

    mov ax, @data;      ;установка сегментов es и ds
    mov ds, ax;
    mov es, ax;

    ;mov [приемник], [источник]
    ; источник - любой из регистров, кроме IP и Flags, ячейка памяти, константа
    ; приемник - любой из регистров, кроме IP, CS, Flags
    ; хотя mov - это перемещение, значение источника не изменяется, т.е. происходит копирование

    mov ax, bx;
    mov cx, ax;
    mov si, cx;
    mov di, si;

    mov al, bl;
    mov bh, cl;

    mov ax, 4;
    mov di, -1;

    ;неправильные варианты использования mov(код не скомпилируется)
    ;mov ax, ip;
    ;mov ip, ax;
    ;mov cs, ax;

    ;ds:si es:di ss:sp ss:bp
    ;использование mov на ячейках памяти
    mov ax, 0b80h:0001;
    mov ax, ds:0001;
    mov ax, mark10;
    mov ax, [mark10 + 2]
    mov ax, [si];
    mov ax, es:[si];
    mov ax, [si + 2];
    mov ax, [si] + 2;
    mov ax, [bx + si];
    mov ax, [bx + si + 2];

    ; получение относительного адреса
    mov di, offset mark10;
    mov si, offset mark19;

    mov ax, ds:[di];
    mov ax, ds:[si];        в данном контексте эти два блока эквивалентны

    mov ax, [mark10];
    mov ax, [mark19];       в данном контексте эти два блока эквивалентны


    ;нельзя пересылать из сегментного регистра в другой сегментный регистр, а также из памяти в сегментный регистр
    ;mov es, ds;
    ;mov ds, es;
    ;mov ss, es;
    ;mov ss, ds;
    ;mov es, [mark10];
    ;mov ds, [mark10];

    ;но через промежуточный регистр можно
    mov ax, es;
    mov ds, ax;
    mov es, ax;

    ;размеры приемника и источника должны совпадать

    mov al, ah;
    mov ax, bx;
    mov ah, cl;

    ;mov bl, ax;
    ;mov ax, cl;

    ;в том числе при работе с памятью

    mov ax, [mark10];
    mov al, [mark2];

    ;mov ax, [mark2];
    ;mov al, [mark10];

    ;но если очень хочеться, то могут и не совпадать, главное явно это указать
    mov ax, word ptr [mark2];
    mov al, byte ptr [mark10];


    mov ax, 4C00h;
    int 21h;

end start